name: Deploy to Amazon EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: sa-east-1                   
  ECR_REPOSITORY: finance-app          
  ECS_SERVICE: service-finance-back               
                                                          

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy-EKS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - run: git clone https://github.com/pedrocoutinh0/pc-infra-ci-kubernetes.git

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      
    - run: terraform -chdir=pc-infra-ci-kubernetes/env/Homolog init

    - run: terraform -chdir=pc-infra-ci-kubernetes/env/Homolog apply -auto-approve
    
    - run: echo "$(terraform -chdir=pc-infra-ci-kubernetes/env/Homolog output -raw IP_db)"
      id: URL
    
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3
      
    - run: aws sts get-caller-identity
    
    - run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name eks-cluster
    
    - run: kubectl get svc

    - run: kubectl delete secret dbhost --ignore-not-found
    - run: kubectl create secret generic dbhost --from-literal=HOST=${{ steps.URL.output.stdout }}

    - run: kubectl delete secret dbport --ignore-not-found
    - run: kubectl create secret generic dbport --from-literal=DBPORT=${{ secrets.DB_PORT }}

    - run: kubectl delete secret dbuser --ignore-not-found
    - run: kubectl create secret generic dbuser --from-literal=USER=${{ secrets.DB_USERNAME }}

    - run: kubectl delete secret dbpassword --ignore-not-found
    - run: kubectl create secret generic dbpassword --from-literal=PASSWORD=${{ secrets.DB_PASSWORD }}

    - run: kubectl delete secret dbname --ignore-not-found
    - run: kubectl create secret generic dbname --from-literal=DBNAME=${{ secrets.DB_DATABASE }}

    - run: kubectl delete secret jwt --ignore-not-found
    - run: kubectl create secret generic jwt --from-literal=JWTSECRET=${{ secrets.JWT_SECRET }}

    - run: kubectl delete secret adminuser --ignore-not-found
    - run: kubectl create secret generic adminuser --from-literal=ADMINUSER=${{ secrets.ADMIN_USERNAME }}

    - run: kubectl delete secret adminpass --ignore-not-found
    - run: kubectl create secret generic adminpass --from-literal=ADMINPASS=${{ secrets.ADMIN_PASSWORD }}

    - run: kubectl delete secret adminemail --ignore-not-found
    - run: kubectl create secret generic adminemail --from-literal=ADMINEMAIL=${{ secrets.ADMIN_EMAIL }}

    - run: kubectl delete secret smtp --ignore-not-found
    - run: kubectl create secret generic smtp --from-literal=SMTP=${{ secrets.SMTP_TRANSPORT }}

    - run: kubectl apply -f pc-infra-ci-kubernetes/nest.yaml

    - run: kubectl set image deployment/nest-api nest=${{ steps.build-image.outputs.image }}